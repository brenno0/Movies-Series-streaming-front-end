/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SearchIndexRouteImport } from './routes/search/index'
import { Route as HomeIndexRouteImport } from './routes/home/index'
import { Route as SeriesIdRouteImport } from './routes/series/$id'
import { Route as MovieIdRouteImport } from './routes/movie/$id'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchIndexRoute = SearchIndexRouteImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeIndexRoute = HomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRouteImport,
} as any)
const SeriesIdRoute = SeriesIdRouteImport.update({
  id: '/series/$id',
  path: '/series/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const MovieIdRoute = MovieIdRouteImport.update({
  id: '/movie/$id',
  path: '/movie/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/movie/$id': typeof MovieIdRoute
  '/series/$id': typeof SeriesIdRoute
  '/home': typeof HomeIndexRoute
  '/search': typeof SearchIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/movie/$id': typeof MovieIdRoute
  '/series/$id': typeof SeriesIdRoute
  '/home': typeof HomeIndexRoute
  '/search': typeof SearchIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/movie/$id': typeof MovieIdRoute
  '/series/$id': typeof SeriesIdRoute
  '/home/': typeof HomeIndexRoute
  '/search/': typeof SearchIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/movie/$id' | '/series/$id' | '/home' | '/search'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/movie/$id' | '/series/$id' | '/home' | '/search'
  id: '__root__' | '/' | '/movie/$id' | '/series/$id' | '/home/' | '/search/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MovieIdRoute: typeof MovieIdRoute
  SeriesIdRoute: typeof SeriesIdRoute
  HomeIndexRoute: typeof HomeIndexRoute
  SearchIndexRoute: typeof SearchIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/series/$id': {
      id: '/series/$id'
      path: '/series/$id'
      fullPath: '/series/$id'
      preLoaderRoute: typeof SeriesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movie/$id': {
      id: '/movie/$id'
      path: '/movie/$id'
      fullPath: '/movie/$id'
      preLoaderRoute: typeof MovieIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MovieIdRoute: MovieIdRoute,
  SeriesIdRoute: SeriesIdRoute,
  HomeIndexRoute: HomeIndexRoute,
  SearchIndexRoute: SearchIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
